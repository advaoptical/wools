{%- from 'fub.jinja' import class_description -%}

{{ ctx.top().get_copy_right() }}
package {{ ctx.package() }};

import java.io.Serializable;
import java.util.Collections;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
{%- if ctx.uses or ctx.vars %}
import com.fasterxml.jackson.annotation.JsonProperty;
{%- endif %}
{% if ctx.imports() %}
{% for import in ctx.imports()|sort -%}
import {{ import }};
{% endfor %}
{%- endif %}
{{ class_description(ctx.description) }}
@JsonInclude(Include.NON_NULL)
public class {{ name }} implements Serializable {

  private static final long serialVersionUID = 1L;
{% for key, var in ctx.vars.items() | sort(attribute='0') %}
{{ class_description(var.description) | indent(2, True) }}
  private final {{ var.java_type }} {{ key }};
{% endfor %}

  @JsonCreator
  public {{ name }} (
    {% for key, var in ctx.vars.items() | sort(attribute='0') -%}
      @JsonProperty("{{ var.yang_name() }}") {{ var.java_type }} {{ key }}
    {%- if not loop.last -%},
    {% endif %}
    {%- endfor %}){
    {%- for key, var in ctx.vars.items() | sort(attribute='0') %}
    this.{{ key }} = {{ key }}
      {%- if 'list' in var.group %} != null ? ImmutableList.copyOf({{ key }}) : ImmutableList.of()
      {%- endif %};{% endfor %}
  }

{% for key, var in ctx.vars.items() %}
  @JsonProperty("{{ var.yang_name() }}")
  public {{ var.java_type }} get{{ key|firstupper() }}(){
    return this.{{ key }};
  }
{% endfor %}

  public static class Builder {
  {%- for key, var in ctx.vars.items() | sort(attribute='0') %}
    private {{ var.java_type }} {{ key }}{% if var.is_build_in_type %} = {{ var.java_type | javadefault }}{% endif %};
  {%- endfor %}

    public Builder() {}

  {% for key, var in ctx.vars.items() | sort(attribute='0') %}
    public Builder {{ key | firstlower() }}({{ var.java_type }} {{ key }}){
      this.{{ key }} = {{ key }};
      return this;
    }
  {% endfor %}

    public {{ name }} build() {
      {%- for key, var in ctx.vars.items() | sort(attribute='0') %}{% if not var.is_build_in_type %}
      this.{{ key }} = this.{{ key }} != null ? this.{{ key }} :
      {#- lists #}{% if var.group and var.group == 'list' %} Collections.emptyList()
      {#- enumerations #} {% elif var.type and var.type.data_type == 'enumeration' %} {{var.java_type}}.values()[0]
      {%- else %} new {{var.java_type}}.Builder().build() {%- endif %};
      {%- endif %}{% endfor %}
      return new {{ name }}({%- for key in ctx.vars.keys() | sort %}{{ key }}{% if not loop.last %}, {% endif %}{%- endfor %});
    }

  }

  @Override
  public int hashCode() {
    return Objects.hash(
      {%- if ctx.uses %}super.hashCode(){% if ctx.vars %}, {% endif %}{% endif %}
      {%- for key in ctx.vars.keys() %}{{ key }}{% if not loop.last %}, {% endif %}
      {%- endfor %});
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    {%- if ctx.vars %}
    {{ name }} that = ({{ name }}) o;
    {%- endif %}
    {%- if ctx.uses or ctx.vars %}
    return
      {%- if ctx.uses %} super.equals(o) {%- if ctx.vars %} &&
      {% endif %}{%- endif %}
    {%- for key in ctx.vars.keys() %} Objects.equals(this.{{ key }}, that.{{ key }})
      {%- if not loop.last %} &&
      {% endif %}
    {%- endfor %};
    {%- else %}
    return true;
    {%- endif %}
  }

}
