{%- from 'fub.jinja' import  interface_method, key_parameters -%}

{%- macro default_method(name, node, return_type, parents_only=False, path_name=None) -%}
{{ ctx.module.top().get_copy_right() }}
@Override
public {{ return_type }} {{ interface_method('get', name, node) }}({{ key_parameters(node, 'String', parents_only, path_name) }}) {
  System.out.println("{{ interface_method('get', name, node) }}");
  return {{ node.java_type | javadefault }};
}
{% endmacro -%}

package {{ ctx.package }};

{% if ctx.rpcs -%}
import akka.http.javadsl.server.Route;
import akka.http.javadsl.server.Directives;
{%- endif %}
{% for import in ctx.imports %}
import {{ import }};
{% endfor %}
public class {{ name }} implements {{ ctx.interface_name }}{

  public {{ name }}() {}
{% for key, rpc in ctx.rpcs.items() %}
  public Route {{ key }}(
    {%- if rpc.input %}{% for name, input in rpc.input.vars.items() -%}
    {{ input.java_type }} {{ name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}{% endif -%}
    ) {
    String msg = String.format("You have called: {{ key }}
    {%- if rpc.input %} with {% for name, input in rpc.input.vars.items() -%}
        %s{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- endif -%}"
    {%- if rpc.input %}{% for name, input in rpc.input.vars.items() -%}
        , {{ name }}{%- endfor -%}
    {%- endif -%});
    return Directives.complete(msg);
  }
{% endfor %}
{%- for name, node in ctx.module.get_root_elements().items() recursive -%}
  {%- if loop.depth <= ctx.levels %}{{ default_method(name, node, node.java_type, True) | indent(2) }}{%- endif -%}
  {%- if loop.depth <= ctx.levels and node.keys -%} {{ default_method(name, node, node.element_type) | indent(2) }} {%- endif -%}
  {%- if loop.depth == ctx.levels and node.children -%}
    {%- if node.keys -%}
      {{ default_method(name, node, node.element_type, path_name='remainingPath') | indent(2) }}
    {%- else -%}
      {{ default_method(name, node, node.java_type, path_name='remainingPath') | indent(2) }}
    {%- endif -%}
  {%- endif -%}
{{ loop(node.children.items()) }}
{%- endfor %}
}
